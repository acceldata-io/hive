/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.hadoop.hive.hbase.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ContactInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8858779363348320344L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ContactInfo\",\"namespace\":\"org.apache.hadoop.hive.hbase.avro\",\"fields\":[{\"name\":\"address\",\"type\":[{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"address1\",\"type\":\"string\"},{\"name\":\"address2\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"zipcode\",\"type\":\"long\"},{\"name\":\"county\",\"type\":[{\"type\":\"record\",\"name\":\"HomePhone\",\"fields\":[{\"name\":\"areaCode\",\"type\":\"long\"},{\"name\":\"number\",\"type\":\"long\"}]},{\"type\":\"record\",\"name\":\"OfficePhone\",\"fields\":[{\"name\":\"areaCode\",\"type\":\"long\"},{\"name\":\"number\",\"type\":\"long\"}]},\"string\",\"null\"]},{\"name\":\"aliases\",\"type\":[{\"type\":\"array\",\"items\":\"string\"},\"null\"]},{\"name\":\"metadata\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]}]}},\"null\"]},{\"name\":\"homePhone\",\"type\":\"HomePhone\"},{\"name\":\"officePhone\",\"type\":\"OfficePhone\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ContactInfo> ENCODER =
      new BinaryMessageEncoder<ContactInfo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ContactInfo> DECODER =
      new BinaryMessageDecoder<ContactInfo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<ContactInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<ContactInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ContactInfo>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ContactInfo to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ContactInfo from a ByteBuffer. */
  public static ContactInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.util.List<org.apache.hadoop.hive.hbase.avro.Address> address;
  @Deprecated public org.apache.hadoop.hive.hbase.avro.HomePhone homePhone;
  @Deprecated public org.apache.hadoop.hive.hbase.avro.OfficePhone officePhone;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ContactInfo() {}

  /**
   * All-args constructor.
   * @param address The new value for address
   * @param homePhone The new value for homePhone
   * @param officePhone The new value for officePhone
   */
  public ContactInfo(java.util.List<org.apache.hadoop.hive.hbase.avro.Address> address, org.apache.hadoop.hive.hbase.avro.HomePhone homePhone, org.apache.hadoop.hive.hbase.avro.OfficePhone officePhone) {
    this.address = address;
    this.homePhone = homePhone;
    this.officePhone = officePhone;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return address;
    case 1: return homePhone;
    case 2: return officePhone;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: address = (java.util.List<org.apache.hadoop.hive.hbase.avro.Address>)value$; break;
    case 1: homePhone = (org.apache.hadoop.hive.hbase.avro.HomePhone)value$; break;
    case 2: officePhone = (org.apache.hadoop.hive.hbase.avro.OfficePhone)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.util.List<org.apache.hadoop.hive.hbase.avro.Address> getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(java.util.List<org.apache.hadoop.hive.hbase.avro.Address> value) {
    this.address = value;
  }

  /**
   * Gets the value of the 'homePhone' field.
   * @return The value of the 'homePhone' field.
   */
  public org.apache.hadoop.hive.hbase.avro.HomePhone getHomePhone() {
    return homePhone;
  }

  /**
   * Sets the value of the 'homePhone' field.
   * @param value the value to set.
   */
  public void setHomePhone(org.apache.hadoop.hive.hbase.avro.HomePhone value) {
    this.homePhone = value;
  }

  /**
   * Gets the value of the 'officePhone' field.
   * @return The value of the 'officePhone' field.
   */
  public org.apache.hadoop.hive.hbase.avro.OfficePhone getOfficePhone() {
    return officePhone;
  }

  /**
   * Sets the value of the 'officePhone' field.
   * @param value the value to set.
   */
  public void setOfficePhone(org.apache.hadoop.hive.hbase.avro.OfficePhone value) {
    this.officePhone = value;
  }

  /**
   * Creates a new ContactInfo RecordBuilder.
   * @return A new ContactInfo RecordBuilder
   */
  public static org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder newBuilder() {
    return new org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder();
  }

  /**
   * Creates a new ContactInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ContactInfo RecordBuilder
   */
  public static org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder newBuilder(org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder other) {
    return new org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder(other);
  }

  /**
   * Creates a new ContactInfo RecordBuilder by copying an existing ContactInfo instance.
   * @param other The existing instance to copy.
   * @return A new ContactInfo RecordBuilder
   */
  public static org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder newBuilder(org.apache.hadoop.hive.hbase.avro.ContactInfo other) {
    return new org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder(other);
  }

  /**
   * RecordBuilder for ContactInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ContactInfo>
    implements org.apache.avro.data.RecordBuilder<ContactInfo> {

    private java.util.List<org.apache.hadoop.hive.hbase.avro.Address> address;
    private org.apache.hadoop.hive.hbase.avro.HomePhone homePhone;
    private org.apache.hadoop.hive.hbase.avro.HomePhone.Builder homePhoneBuilder;
    private org.apache.hadoop.hive.hbase.avro.OfficePhone officePhone;
    private org.apache.hadoop.hive.hbase.avro.OfficePhone.Builder officePhoneBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.homePhone)) {
        this.homePhone = data().deepCopy(fields()[1].schema(), other.homePhone);
        fieldSetFlags()[1] = true;
      }
      if (other.hasHomePhoneBuilder()) {
        this.homePhoneBuilder = org.apache.hadoop.hive.hbase.avro.HomePhone.newBuilder(other.getHomePhoneBuilder());
      }
      if (isValidValue(fields()[2], other.officePhone)) {
        this.officePhone = data().deepCopy(fields()[2].schema(), other.officePhone);
        fieldSetFlags()[2] = true;
      }
      if (other.hasOfficePhoneBuilder()) {
        this.officePhoneBuilder = org.apache.hadoop.hive.hbase.avro.OfficePhone.newBuilder(other.getOfficePhoneBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ContactInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.hadoop.hive.hbase.avro.ContactInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.homePhone)) {
        this.homePhone = data().deepCopy(fields()[1].schema(), other.homePhone);
        fieldSetFlags()[1] = true;
      }
      this.homePhoneBuilder = null;
      if (isValidValue(fields()[2], other.officePhone)) {
        this.officePhone = data().deepCopy(fields()[2].schema(), other.officePhone);
        fieldSetFlags()[2] = true;
      }
      this.officePhoneBuilder = null;
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.util.List<org.apache.hadoop.hive.hbase.avro.Address> getAddress() {
      return address;
    }

    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder setAddress(java.util.List<org.apache.hadoop.hive.hbase.avro.Address> value) {
      validate(fields()[0], value);
      this.address = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder clearAddress() {
      address = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'homePhone' field.
      * @return The value.
      */
    public org.apache.hadoop.hive.hbase.avro.HomePhone getHomePhone() {
      return homePhone;
    }

    /**
      * Sets the value of the 'homePhone' field.
      * @param value The value of 'homePhone'.
      * @return This builder.
      */
    public org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder setHomePhone(org.apache.hadoop.hive.hbase.avro.HomePhone value) {
      validate(fields()[1], value);
      this.homePhoneBuilder = null;
      this.homePhone = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'homePhone' field has been set.
      * @return True if the 'homePhone' field has been set, false otherwise.
      */
    public boolean hasHomePhone() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'homePhone' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.hadoop.hive.hbase.avro.HomePhone.Builder getHomePhoneBuilder() {
      if (homePhoneBuilder == null) {
        if (hasHomePhone()) {
          setHomePhoneBuilder(org.apache.hadoop.hive.hbase.avro.HomePhone.newBuilder(homePhone));
        } else {
          setHomePhoneBuilder(org.apache.hadoop.hive.hbase.avro.HomePhone.newBuilder());
        }
      }
      return homePhoneBuilder;
    }

    /**
     * Sets the Builder instance for the 'homePhone' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder setHomePhoneBuilder(org.apache.hadoop.hive.hbase.avro.HomePhone.Builder value) {
      clearHomePhone();
      homePhoneBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'homePhone' field has an active Builder instance
     * @return True if the 'homePhone' field has an active Builder instance
     */
    public boolean hasHomePhoneBuilder() {
      return homePhoneBuilder != null;
    }

    /**
      * Clears the value of the 'homePhone' field.
      * @return This builder.
      */
    public org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder clearHomePhone() {
      homePhone = null;
      homePhoneBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'officePhone' field.
      * @return The value.
      */
    public org.apache.hadoop.hive.hbase.avro.OfficePhone getOfficePhone() {
      return officePhone;
    }

    /**
      * Sets the value of the 'officePhone' field.
      * @param value The value of 'officePhone'.
      * @return This builder.
      */
    public org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder setOfficePhone(org.apache.hadoop.hive.hbase.avro.OfficePhone value) {
      validate(fields()[2], value);
      this.officePhoneBuilder = null;
      this.officePhone = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'officePhone' field has been set.
      * @return True if the 'officePhone' field has been set, false otherwise.
      */
    public boolean hasOfficePhone() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'officePhone' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.apache.hadoop.hive.hbase.avro.OfficePhone.Builder getOfficePhoneBuilder() {
      if (officePhoneBuilder == null) {
        if (hasOfficePhone()) {
          setOfficePhoneBuilder(org.apache.hadoop.hive.hbase.avro.OfficePhone.newBuilder(officePhone));
        } else {
          setOfficePhoneBuilder(org.apache.hadoop.hive.hbase.avro.OfficePhone.newBuilder());
        }
      }
      return officePhoneBuilder;
    }

    /**
     * Sets the Builder instance for the 'officePhone' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder setOfficePhoneBuilder(org.apache.hadoop.hive.hbase.avro.OfficePhone.Builder value) {
      clearOfficePhone();
      officePhoneBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'officePhone' field has an active Builder instance
     * @return True if the 'officePhone' field has an active Builder instance
     */
    public boolean hasOfficePhoneBuilder() {
      return officePhoneBuilder != null;
    }

    /**
      * Clears the value of the 'officePhone' field.
      * @return This builder.
      */
    public org.apache.hadoop.hive.hbase.avro.ContactInfo.Builder clearOfficePhone() {
      officePhone = null;
      officePhoneBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ContactInfo build() {
      try {
        ContactInfo record = new ContactInfo();
        record.address = fieldSetFlags()[0] ? this.address : (java.util.List<org.apache.hadoop.hive.hbase.avro.Address>) defaultValue(fields()[0]);
        if (homePhoneBuilder != null) {
          record.homePhone = this.homePhoneBuilder.build();
        } else {
          record.homePhone = fieldSetFlags()[1] ? this.homePhone : (org.apache.hadoop.hive.hbase.avro.HomePhone) defaultValue(fields()[1]);
        }
        if (officePhoneBuilder != null) {
          record.officePhone = this.officePhoneBuilder.build();
        } else {
          record.officePhone = fieldSetFlags()[2] ? this.officePhone : (org.apache.hadoop.hive.hbase.avro.OfficePhone) defaultValue(fields()[2]);
        }
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ContactInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<ContactInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ContactInfo>
    READER$ = (org.apache.avro.io.DatumReader<ContactInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
