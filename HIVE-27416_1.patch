From 7265c219d5b3534a05aba1afcfe3ec0acbcc6cd2 Mon Sep 17 00:00:00 2001
From: Denys Kuzmenko <dkuzmenko@cloudera.com>
Date: Tue, 6 Jun 2023 23:49:54 +0200
Subject: [PATCH] ClassCastException for string to decimal64 conversion

---
 .../ql/exec/vector/VectorizationContext.java  |  8 ++
 .../expressions/CastStringToDecimal.java      | 11 ++-
 .../expressions/CastStringToDecimal64.java    | 48 ++++++++++
 .../clientpositive/vector_string_decimal64.q  | 16 ++++
 .../llap/vector_string_decimal64.q.out        | 87 +++++++++++++++++++
 5 files changed, 167 insertions(+), 3 deletions(-)
 create mode 100644 ql/src/java/org/apache/hadoop/hive/ql/exec/vector/expressions/CastStringToDecimal64.java
 create mode 100644 ql/src/test/queries/clientpositive/vector_string_decimal64.q
 create mode 100644 ql/src/test/results/clientpositive/llap/vector_string_decimal64.q.out

diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizationContext.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizationContext.java
index dc80e13a2eea..412e97dfe37b 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizationContext.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/VectorizationContext.java
@@ -72,6 +72,7 @@
 import org.apache.hadoop.hive.ql.exec.vector.expressions.CastStringToBoolean;
 import org.apache.hadoop.hive.ql.exec.vector.expressions.CastStringToDateWithFormat;
 import org.apache.hadoop.hive.ql.exec.vector.expressions.CastStringToDecimal;
+import org.apache.hadoop.hive.ql.exec.vector.expressions.CastStringToDecimal64;
 import org.apache.hadoop.hive.ql.exec.vector.expressions.CastStringToTimestampWithFormat;
 import org.apache.hadoop.hive.ql.exec.vector.expressions.CastTimestampToChar;
 import org.apache.hadoop.hive.ql.exec.vector.expressions.CastTimestampToCharWithFormat;
@@ -3323,6 +3324,13 @@ private VectorExpression getCastToDecimal(List<ExprNodeDesc> childExpr, VectorEx
             returnType, DataTypePhysicalVariation.NONE);
       }
     } else if (isStringFamily(inputType)) {
+      if (tryDecimal64Cast) {
+        if (((DecimalTypeInfo)returnType).precision() <= 18) {
+          return createVectorExpression(CastStringToDecimal64.class, childExpr,
+              VectorExpressionDescriptor.Mode.PROJECTION, returnType, DataTypePhysicalVariation.DECIMAL_64);
+        }
+        return null;
+      }
       return createVectorExpression(CastStringToDecimal.class, childExpr, VectorExpressionDescriptor.Mode.PROJECTION,
           returnType, DataTypePhysicalVariation.NONE);
     } else if (inputType.equals("timestamp")) {
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/expressions/CastStringToDecimal.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/expressions/CastStringToDecimal.java
index b865acd6741b..07ceee4b342e 100644
--- a/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/expressions/CastStringToDecimal.java
+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/expressions/CastStringToDecimal.java
@@ -22,6 +22,7 @@
 
 import org.apache.hadoop.hive.common.type.HiveDecimal;
 import org.apache.hadoop.hive.ql.exec.vector.BytesColumnVector;
+import org.apache.hadoop.hive.ql.exec.vector.ColumnVector;
 import org.apache.hadoop.hive.ql.exec.vector.DecimalColumnVector;
 import org.apache.hadoop.hive.ql.exec.vector.VectorExpressionDescriptor;
 import org.apache.hadoop.hive.ql.exec.vector.VectorizedRowBatch;
@@ -48,7 +49,7 @@ public CastStringToDecimal() {
   /**
    * Convert input string to a decimal, at position i in the respective vectors.
    */
-  protected void func(DecimalColumnVector outputColVector, BytesColumnVector inputColVector, int i) {
+  protected void func(ColumnVector outputColVector, BytesColumnVector inputColVector, int i) {
     String s;
     try {
 
@@ -57,7 +58,7 @@ protected void func(DecimalColumnVector outputColVector, BytesColumnVector input
        * making a new string.
        */
       s = new String(inputColVector.vector[i], inputColVector.start[i], inputColVector.length[i], "UTF-8");
-      outputColVector.set(i, HiveDecimal.create(s));
+      setOutputColumnVectorValue(outputColVector, i, s);
     } catch (Exception e) {
 
       // for any exception in conversion to decimal, produce NULL
@@ -66,6 +67,10 @@ protected void func(DecimalColumnVector outputColVector, BytesColumnVector input
     }
   }
 
+  protected void setOutputColumnVectorValue(ColumnVector outputColVector, int i, String s) {
+    ((DecimalColumnVector) outputColVector).set(i, HiveDecimal.create(s));
+  }
+
   @Override
   public void evaluate(VectorizedRowBatch batch) throws HiveException {
 
@@ -76,7 +81,7 @@ public void evaluate(VectorizedRowBatch batch) throws HiveException {
     BytesColumnVector inputColVector = (BytesColumnVector) batch.cols[inputColumnNum[0]];
     int[] sel = batch.selected;
     int n = batch.size;
-    DecimalColumnVector outputColVector = (DecimalColumnVector) batch.cols[outputColumnNum];
+    ColumnVector outputColVector = batch.cols[outputColumnNum];
 
     boolean[] inputIsNull = inputColVector.isNull;
     boolean[] outputIsNull = outputColVector.isNull;
diff --git a/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/expressions/CastStringToDecimal64.java b/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/expressions/CastStringToDecimal64.java
new file mode 100644
index 000000000000..7eb66e87f9e8
--- /dev/null
+++ b/ql/src/java/org/apache/hadoop/hive/ql/exec/vector/expressions/CastStringToDecimal64.java
@@ -0,0 +1,48 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.hive.ql.exec.vector.expressions;
+
+
+import org.apache.hadoop.hive.common.type.HiveDecimal;
+import org.apache.hadoop.hive.ql.exec.vector.ColumnVector;
+import org.apache.hadoop.hive.ql.exec.vector.Decimal64ColumnVector;
+
+/**
+ * Cast a string to a decimal64.
+ *
+ * If other functions besides cast need to take a string in and produce a decimal64,
+ * you can subclass this class or convert it to a superclass, and
+ * implement different "func()" methods for each operation.
+ */
+public class CastStringToDecimal64 extends CastStringToDecimal {
+  private static final long serialVersionUID = 1L;
+
+  public CastStringToDecimal64(int inputColumn, int outputColumnNum) {
+    super(inputColumn, outputColumnNum);
+  }
+
+  public CastStringToDecimal64() {
+    super();
+  }
+  
+  @Override
+  protected void setOutputColumnVectorValue(ColumnVector outputColVector, int i, String s) {
+    ((Decimal64ColumnVector) outputColVector).set(i, HiveDecimal.create(s));
+  }
+}
\ No newline at end of file
diff --git a/ql/src/test/queries/clientpositive/vector_string_decimal64.q b/ql/src/test/queries/clientpositive/vector_string_decimal64.q
new file mode 100644
index 000000000000..3c9d661ba63c
--- /dev/null
+++ b/ql/src/test/queries/clientpositive/vector_string_decimal64.q
@@ -0,0 +1,16 @@
+-- Mask the totalSize value as it can have slight variability, causing test flakiness
+--! qt:replace:/(\s+totalSize\s+)\S+(\s+)/$1#Masked#$2/
+set hive.explain.user=false;
+set hive.fetch.task.conversion=none;
+
+create external table parquet_decimal64(salary string) stored as parquet;      
+insert into parquet_decimal64 values ('0'), ('43.5'), ('144.2'), ('45.7'), ('100');
+
+explain select * from parquet_decimal64 
+    where cast(salary as decimal(12, 2)) <= 100 and cast(salary as decimal(12, 2)) >= 0.0;  
+    
+-- SORT_QUERY_RESULTS    
+select * from parquet_decimal64 
+    where cast(salary as decimal(12, 2)) <= 100 and cast(salary as decimal(12, 2)) >= 0.0;
+    
+drop table parquet_decimal64;
\ No newline at end of file
diff --git a/ql/src/test/results/clientpositive/llap/vector_string_decimal64.q.out b/ql/src/test/results/clientpositive/llap/vector_string_decimal64.q.out
new file mode 100644
index 000000000000..c4de7e2493ab
--- /dev/null
+++ b/ql/src/test/results/clientpositive/llap/vector_string_decimal64.q.out
@@ -0,0 +1,87 @@
+PREHOOK: query: create external table parquet_decimal64(salary string) stored as parquet
+PREHOOK: type: CREATETABLE
+PREHOOK: Output: database:default
+PREHOOK: Output: default@parquet_decimal64
+POSTHOOK: query: create external table parquet_decimal64(salary string) stored as parquet
+POSTHOOK: type: CREATETABLE
+POSTHOOK: Output: database:default
+POSTHOOK: Output: default@parquet_decimal64
+PREHOOK: query: insert into parquet_decimal64 values ('0'), ('43.5'), ('144.2'), ('45.7'), ('100')
+PREHOOK: type: QUERY
+PREHOOK: Input: _dummy_database@_dummy_table
+PREHOOK: Output: default@parquet_decimal64
+POSTHOOK: query: insert into parquet_decimal64 values ('0'), ('43.5'), ('144.2'), ('45.7'), ('100')
+POSTHOOK: type: QUERY
+POSTHOOK: Input: _dummy_database@_dummy_table
+POSTHOOK: Output: default@parquet_decimal64
+POSTHOOK: Lineage: parquet_decimal64.salary SCRIPT []
+PREHOOK: query: explain select * from parquet_decimal64 
+    where cast(salary as decimal(12, 2)) <= 100 and cast(salary as decimal(12, 2)) >= 0.0
+PREHOOK: type: QUERY
+PREHOOK: Input: default@parquet_decimal64
+#### A masked pattern was here ####
+POSTHOOK: query: explain select * from parquet_decimal64 
+    where cast(salary as decimal(12, 2)) <= 100 and cast(salary as decimal(12, 2)) >= 0.0
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@parquet_decimal64
+#### A masked pattern was here ####
+STAGE DEPENDENCIES:
+  Stage-1 is a root stage
+  Stage-0 depends on stages: Stage-1
+
+STAGE PLANS:
+  Stage: Stage-1
+    Tez
+#### A masked pattern was here ####
+      Vertices:
+        Map 1 
+            Map Operator Tree:
+                TableScan
+                  alias: parquet_decimal64
+                  filterExpr: CAST( salary AS decimal(12,2)) BETWEEN 0 AND 100 (type: boolean)
+                  Statistics: Num rows: 5 Data size: 435 Basic stats: COMPLETE Column stats: COMPLETE
+                  Filter Operator
+                    predicate: CAST( salary AS decimal(12,2)) BETWEEN 0 AND 100 (type: boolean)
+                    Statistics: Num rows: 1 Data size: 87 Basic stats: COMPLETE Column stats: COMPLETE
+                    Select Operator
+                      expressions: salary (type: string)
+                      outputColumnNames: _col0
+                      Statistics: Num rows: 1 Data size: 87 Basic stats: COMPLETE Column stats: COMPLETE
+                      File Output Operator
+                        compressed: false
+                        Statistics: Num rows: 1 Data size: 87 Basic stats: COMPLETE Column stats: COMPLETE
+                        table:
+                            input format: org.apache.hadoop.mapred.SequenceFileInputFormat
+                            output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
+                            serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe
+            Execution mode: vectorized, llap
+            LLAP IO: all inputs (cache only)
+
+  Stage: Stage-0
+    Fetch Operator
+      limit: -1
+      Processor Tree:
+        ListSink
+
+PREHOOK: query: select * from parquet_decimal64 
+    where cast(salary as decimal(12, 2)) <= 100 and cast(salary as decimal(12, 2)) >= 0.0
+PREHOOK: type: QUERY
+PREHOOK: Input: default@parquet_decimal64
+#### A masked pattern was here ####
+POSTHOOK: query: select * from parquet_decimal64 
+    where cast(salary as decimal(12, 2)) <= 100 and cast(salary as decimal(12, 2)) >= 0.0
+POSTHOOK: type: QUERY
+POSTHOOK: Input: default@parquet_decimal64
+#### A masked pattern was here ####
+0
+100
+43.5
+45.7
+PREHOOK: query: drop table parquet_decimal64
+PREHOOK: type: DROPTABLE
+PREHOOK: Input: default@parquet_decimal64
+PREHOOK: Output: default@parquet_decimal64
+POSTHOOK: query: drop table parquet_decimal64
+POSTHOOK: type: DROPTABLE
+POSTHOOK: Input: default@parquet_decimal64
+POSTHOOK: Output: default@parquet_decimal64
